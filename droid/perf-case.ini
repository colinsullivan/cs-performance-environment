# INPUTS:
#  I1: [v1p]
#  I2: [v2p]

# OUTPUTS:
#  O1: [v1po] v1 pitch out
#  O2: [v2po] v2 pitch out
#  O8: [synlfo]

# GATES ON X7:
#  G11: [rst out]
#  G12: [clk out]

# GATES ON G8 1:
#  G1.1: [v1g] v1 gate
#  G1.2: [v1go] v2 gate in
#  G1.3: [v2gi]
#  G1.4: [v2go] v2 gate out
#  G1.5: [rndclk] random clock
#  G1.7: [clk]
#  G1.8: [rst]

# GATES ON G8 2:
#  G2.1: [ki] kick in
#  G2.2: [ko] kick out
#  G2.3: [si] snare in
#  G2.4: [so] snare out
#  G2.5: [hi] hat in
#  G2.6: [ho] hat out
#  G2.7: [Hi] open hat in
#  G2.8: [Ho] open hat out

# CONTROLLER 1:
#  P1.1: [v1 prob] v1 bend probability
#  P1.2: [v2 prob] v2 bend probability
#  B1.1: [dir] pitch bend dir
#  B1.2: [v1 + v2] group v1 + v2 switch
#  B1.3: [xpose 5th]
#  B1.4: [xpose 2oct]
#  B1.7: [drone mode]

# CONTROLLER 2:
#  P2.1: [xpose] global transpose
#  P2.3: [att] bender attack time
#  P2.4: [rel] bender release time
#  P2.5: [amt]
#  P2.6: [attack shape]

# CONTROLLER 3:
#  P3.1: [reset div]
#  P3.2: [reset length]
#  B3.2: [divreset]

# CONTROLLER 4:
#  P4.9: [clk div]
#  P4.10: [clk mlt]

# CONTROLLER 5:
#  S5.1: [perc ofst] percussion switch offset
#  S5.3: [rnd fwd]
#  S5.4: [rnd perc]

[p2b8]
[p10]
[p2b8]
[p10]
[s10]

# -------------------------------------------------
# v1 pitch bender
# -------------------------------------------------

# pitch bend envelope
[contour]
    attackshape = _BEND_SHAPE
    gate = _V1_PROB_GATE
    level = 1
    attack = _TIME_CTRL * 20
    hold = 0
    decay = 0
    sustain = 1
    release = P2.4
    output = _PITCH_ENV
    negated = _PITCH_ENV_INV
    startfromzero = 1

# adds incoming pitch to bend
[math]
    input1 = I1 + _GLOBAL_XPOSE_OUT
    input2 = _BEND_OUT
    sum = _SWITCH_V1P_IN

[switch]
    input1 = _PITCH_ENV
    input2 = _PITCH_ENV_INV
    offset = _PITCH_ENV_DIRECTION
    output1 = _PITCH_ENV_SWITCHED

# scales pitch bend by amount knob
[math]
    input1 = _PITCH_ENV_SWITCHED
    input2 = _AMT_KNOB * 1V + 1V
    product = _BEND_OUT

# passes gate through based on knob
[bernoulli]
    input = _V1_GATE
    distribution = P1.1
    output1 = _V1_PROB_GATE

# -------------------------------------------------
# v2 pitch bender
# -------------------------------------------------

# pitch bend envelope
[contour]
    attackshape = _BEND_SHAPE
    gate = _V2_PROB_GATE
    level = 1
    attack = _TIME_CTRL * 20
    hold = 0
    decay = 0.2
    sustain = 1
    release = P2.4
    output = _PITCH_ENV2
    negated = _PITCH_ENV_INV2
    startfromzero = 1

# adds incoming pitch to bend
[math]
    input1 = I2 + _GLOBAL_XPOSE_OUT
    input2 = _BEND_OUT2
    sum = _SWITCH_V2P_IN

[switch]
    input1 = _PITCH_ENV2
    input2 = _PITCH_ENV_INV2
    offset = _PITCH_ENV_DIRECTION
    output1 = _PITCH_ENV_SWITCHED2

# scales pitch bend by amt knob
[math]
    input1 = _PITCH_ENV_SWITCHED2
    input2 = _AMT_KNOB * 1V + 1V
    product = _BEND_OUT2

# passes gate through based on knob
[bernoulli]
    input = _V2_GATE
    distribution = P1.2
    output1 = _V2_PROB_GATE

# -------------------------------------------------
# global pitch bender controls
# -------------------------------------------------

# bender time knob
[pot]
    pot = P2.3
    output = _TIME_CTRL

# bender amt knob, defines the number of octaves
[pot]
    ledgauge = 0.2
    discrete = 3
    pot = P2.5
    output = _AMT_KNOB

[pot]
    output = _BEND_SHAPE
    pot = P2.6

[button]
    button = B1.1
    onvalue = 1
    offvalue = 0
    led = L1.1
    output = _PITCH_ENV_DIRECTION

# -------------------------------------------------
# global xpose
# -------------------------------------------------

[pot]
    pot = P2.1
    outputscale = _GLOBAL_XPOSE_MODE
    notch = 0.1
    bipolar = _GLOBAL_XPOSE_OUT

[buttongroup]
    button1 = B1.3
    button2 = B1.4
    value1 = 0.5V
    value2 = 2V
    led1 = L1.3
    led2 = L1.4
    output = _GLOBAL_XPOSE_MODE

# -------------------------------------------------
# drone mode
# -------------------------------------------------

[button]
    button = B1.7
    onvalue = 2
    offvalue = 0
    led = L1.7
    output = _DRONE_MODE_GATE

# drone mode gate switch
[switch]
    input1 = G1.1
    input2 = G1.3
    input3 = 1
    input4 = 1
    offset = _DRONE_MODE_GATE
    output1 = _V1_GATE
    output2 = _V2_GATE

# -------------------------------------------------
# global voice switching
# -------------------------------------------------

# v2 switch
[switch]
    input1 = _SWITCH_V2P_IN
    input2 = _V2_GATE
    input3 = _SWITCH_V1P_IN
    input4 = _V1_GATE
    offset = _V1V2_SWITCH_BUTTON
    output3 = O2
    output4 = G1.4

# v1 switch
[switch]
    input1 = _SWITCH_V1P_IN
    input2 = _V1_GATE
    offset = 0
    output1 = O1
    output2 = G1.2

[button]
    button = B1.2
    onvalue = 2
    offvalue = 0
    led = L1.2
    output = _V1V2_SWITCH_BUTTON

# -------------------------------------------------
# lfo
# -------------------------------------------------

# beat synced LFO
[lfo]
    taptempo = _RESET_DIVIDER_OUT
    bipolar = 1
    sine = O8

# -------------------------------------------------
# reset
# -------------------------------------------------

# reset length control
[pot]
    pot = P3.2
    outputscale = 8
    notch = 0
    output = _RESET_SEQUENCER_POT

# reset clock divider
[clocktool]
    clock = _CLOCK_DIV_OUT
    reset = _RESET_IN_SIG
    divide = _RESET_DIV_POT
    output = _RESET_DIVIDER_OUT

# reset in signal
[copy]
    input = G1.8
    output = _RESET_IN_SIG

# reset clock divider control
[pot]
    pot = P3.1
    outputscale = 4
    output = _RESET_DIV_POT

[sequencer]
    clock = _RESET_DIVIDER_OUT
    reset = _RESET_IN_SIG
    steps = _RESET_SEQUENCER_POT
    pitch1 = 0
    pitch2 = 0
    pitch3 = 0
    pitch4 = 0
    pitch5 = 0
    pitch6 = 0
    pitch7 = 0
    pitch8 = 0
    cv1 = 0
    cv2 = 0
    cv3 = 0
    cv4 = 0
    cv5 = 0
    cv6 = 0
    cv7 = 0
    cv8 = 0
    gate1 = 1
    gate2 = 0
    gate3 = 0
    gate4 = 0
    gate5 = 0
    gate6 = 0
    gate7 = 0
    gate8 = 0
    gateoutput = _CLOCK_DIV_RESET

[mixer]
    input1 = _RESET_IN_SIG
    input3 = _CLOCK_DIV_RESET_OUT
    output = G11

# switch on the clock divided reset
[switch]
    input1 = 0
    input2 = _CLOCK_DIV_RESET
    offset = _CLOCK_DIV_RESET_BUTTON
    output1 = _CLOCK_DIV_RESET_OUT

# Enables the reset clock divider
[button]
    button = B3.2
    onvalue = 1
    offvalue = 0
    led = L3.2
    output = _CLOCK_DIV_RESET_BUTTON

# -------------------------------------------------
# clock
# -------------------------------------------------

[copy]
    input = _CLOCK_DIV_OUT
    output = G12

[copy]
    input = G1.7
    output = _CLOCK_IN_SIG

# main clk div control
[pot]
    pot = P4.9
    outputscale = 20
    output = _CLOCK_DIV_POT

# Main clk div
[clocktool]
    reset = _RESET_IN_SIG
    clock = _CLOCK_IN_SIG
    divide = _CLOCK_DIV_POT + 1
    multiply = _CLOCK_MLT_POT + 1
    output = _CLOCK_DIV_OUT

# clk mlt control
[pot]
    pot = P4.10
    outputscale = 10
    output = _CLOCK_MLT_POT

# -------------------------------------------------
# switched percussion
# -------------------------------------------------

# random clock switch is off gate
[compare]
    input = S5.3
    compare = 0
    ifequal = 1
    else = 0
    output = _RND_CLK_SWITCH_IS_OFF

# main percussion switch
[switch]
    forward = _PERC_SWITCH_FWD
    input1 = _PERC_1_G_IN
    input2 = _PERC_2_G_IN
    input3 = _PERC_3_G_IN
    input4 = _PERC_4_G_IN
    offset = S5.1
    reset = _RND_CLK_SWITCH_IS_OFF
    output1 = _PERC_1_MAIN_SW_OUT
    output2 = _PERC_2_MAIN_SW_OUT
    output3 = _PERC_3_MAIN_SW_OUT
    output4 = _PERC_4_MAIN_SW_OUT

# switch rnd clock into perc switch forward
[switch]
    input1 = 0
    input2 = _RND_CLK_IN
    input3 = _RND_CLK_IN
    offset = S5.3
    output1 = _PERC_SWITCH_FWD

# -------------------------------------------------
# random percussion
# -------------------------------------------------

# random clock distributed to percussion voices
[switch]
    input1 = _RND_PERC_GATE_INT
    offset = _RND_PERC_OFFSET
    output2 = _PERC_1_RND_SW_OUT
    output3 = _PERC_2_RND_SW_OUT
    output4 = _PERC_3_RND_SW_OUT
    output5 = _PERC_4_RND_SW_OUT

[random]
    clock = _RND_PERC_GATE_INT
    minimum = 0
    maximum = 3
    output = _RND_PERC_OFFSET

# random clock percussion enable switch
[switch]
    input1 = 0
    input2 = _RND_CLK_IN
    input3 = _RND_CLK_IN
    offset = S5.4
    output1 = _RND_PERC_GATE_INT

# -------------------------------------------------
# perc I/O
# -------------------------------------------------

[copy]
    input = _PERC_2_G_OUT
    output = G2.4

[copy]
    input = _PERC_3_G_OUT
    output = G2.6

[copy]
    input = _PERC_4_G_OUT
    output = G2.8

# perc 1 output bus
[mixer]
    input1 = _PERC_1_MAIN_SW_OUT
    input2 = _PERC_1_RND_SW_OUT
    output = _PERC_1_G_OUT

# perc 2 output bus
[mixer]
    input1 = _PERC_2_MAIN_SW_OUT
    input2 = _PERC_2_RND_SW_OUT
    output = _PERC_2_G_OUT

# perc 3 output bus
[mixer]
    input1 = _PERC_3_MAIN_SW_OUT
    input2 = _PERC_3_RND_SW_OUT
    output = _PERC_3_G_OUT

# perc 4 output bus
[mixer]
    input1 = _PERC_4_MAIN_SW_OUT
    input2 = _PERC_4_RND_SW_OUT
    output = _PERC_4_G_OUT

[copy]
    input = _PERC_1_G_OUT
    output = G2.2

[copy]
    input = G1.5
    output = _RND_CLK_IN

[copy]
    input = G2.1
    output = _PERC_1_G_IN

[copy]
    input = G2.3
    output = _PERC_2_G_IN

[copy]
    input = G2.5
    output = _PERC_3_G_IN

[copy]
    input = G2.7
    output = _PERC_4_G_IN
